# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XtCyad_jhq7Y8fbxInd1ombTDTjcWzk2
"""

import speech_recognition as sr
import pyaudio
import pickle
from transformers import pipeline
#emotion_classifier = pipeline('text-classification', model='cardiffnlp/twitter-roberta-base-emotion',return_all_scores=True)
init_rec = sr.Recognizer()
print("Let's speak!!")
with sr.Microphone() as source:
    #print(type(source))
    audio_data = init_rec.record(source, duration=5)
    print("Recognizing your text.............")
    text = init_rec.recognize_google(audio_data)
    print(text)
    #emotion_scores = emotion_classifier(text)
#print(emotion_scores)
import pandas as pd
import numpy as np

df = pd.read_csv("emotion-dataset.csv")

df.head()

df['Emotion'].value_counts()



import neattext.functions as nfx

dir(nfx)

df['Clean_Text'] = df['Text'].apply(nfx.remove_userhandles)

df['Clean_Text'] = df['Clean_Text'].apply(nfx.remove_stopwords)

df
import sklearn
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


Xfeatures = df['Clean_Text']
ylabels = df['Emotion']

from sklearn.pipeline import Pipeline

X_train, X_test, y_train, y_test = train_test_split(Xfeatures, ylabels, test_size=0.3, random_state=42)

pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression())])

pipe_lr.fit(X_train,y_train)

pickle.dump(pipe_lr,open("voicetotext.pkl","wb"))
print(pipe_lr.predict([text]))

print(pipe_lr.score(X_test,y_test))